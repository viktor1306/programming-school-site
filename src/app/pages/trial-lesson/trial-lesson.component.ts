import { Component, ElementRef, HostListener, ViewChild, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClient, HttpClientModule } from '@angular/common/http';

@Component({
  selector: 'app-trial-lesson',
  standalone: true,
  imports: [CommonModule, HttpClientModule],
  templateUrl: './trial-lesson.component.html',
  styleUrls: ['./trial-lesson.component.css']
})
export class TrialLessonComponent implements OnInit {
  @ViewChild('selectWrapper') selectWrapper!: ElementRef;
  @ViewChild('nameInput') nameInput!: ElementRef<HTMLInputElement>;
  @ViewChild('phoneInput') phoneInput!: ElementRef<HTMLInputElement>;

  isOpen = false;
  selectedCourse = '–û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å –∑—ñ —Å–ø–∏—Å–∫—É';
  courses = [
    "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è", "Scratch", "Python", "Web", "Digital ART",
    "Java", "Blender 3D", "–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç", "–ö–ì Junior",
    "–ö–ì PRO", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
  ];

  isSubmitting = false;
  submitMessage = '';

  private botToken = '';
  private chatId = '';
  private telegramApiUrl = '';

  constructor(private http: HttpClient) {}

  ngOnInit() {
    this.http.get<any>('assets/config.json').subscribe({
      next: (config) => {
        this.botToken = config.telegramBotToken;
        this.chatId = config.telegramChatId;
        this.telegramApiUrl = `https://api.telegram.org/bot${this.botToken}/sendMessage`;
      },
      error: () => {
        console.error('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ config.json');
      }
    });
  }

  @HostListener('document:click', ['$event'])
  clickout(event: Event) {
    if (this.isOpen && !this.selectWrapper.nativeElement.contains(event.target)) {
      this.isOpen = false;
    }
  }

  toggleDropdown() { this.isOpen = !this.isOpen; }

  selectCourse(course: string, event: MouseEvent) {
    event.stopPropagation();
    this.selectedCourse = course;
    this.isOpen = false;
  }

  onSubmit() {
    const name = this.nameInput.nativeElement.value.trim();
    const phone = this.phoneInput.nativeElement.value.trim();
    const course = this.selectedCourse;

    if (!name || !phone || course === '–û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å –∑—ñ —Å–ø–∏—Å–∫—É') {
      this.submitMessage = '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è!';
      setTimeout(() => this.submitMessage = '', 3000);
      return;
    }

    if (!this.botToken || !this.chatId) {
      this.submitMessage = '‚ö†Ô∏è –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ Telegram API (config.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ).';
      setTimeout(() => this.submitMessage = '', 4000);
      return;
    }

    this.isSubmitting = true;
    this.submitMessage = '–í—ñ–¥–ø—Ä–∞–≤–∫–∞...';

    const message = `
üì© *–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ —Å–∞–π—Ç—É:*

üë§ –Ü–º'—è: ${name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üìò –ö—É—Ä—Å: ${course}
    `;

    this.http.post(this.telegramApiUrl, {
      chat_id: this.chatId,
      text: message,
      parse_mode: 'Markdown'
    }).subscribe({
      next: () => {
        this.submitMessage = '‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞.';
        this.isSubmitting = false;
        this.nameInput.nativeElement.value = '';
        this.phoneInput.nativeElement.value = '';
        this.selectedCourse = '–û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å –∑—ñ —Å–ø–∏—Å–∫—É';
        setTimeout(() => this.submitMessage = '', 5000);
      },
      error: (err) => {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ:', err);
        this.submitMessage = '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.';
        this.isSubmitting = false;
        setTimeout(() => this.submitMessage = '', 5000);
      }
    });
  }
}
